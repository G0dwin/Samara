<?php

Samara_Include('SamaraBase', 'inc');

class Controller extends SamaraBase
{

	protected static $current_instance;
	protected static $all_instances;
	protected $params;
	
	protected function __construct()
	{
		
	}
	
	public function call($name, $args)
	{
		if (preg_match('/^render(.+)$/', $name, $matches))
		{
			return Theme::GetView(NULL, $matches[1]);
		}
	}
	
	public function __call($name, $args)
	{
		$class = get_class($this);
		$trace = debug_backtrace();
		
		//if (isset($trace[2]) && is_a($trace[2]['class'], Samara_GetFullClassName('Controller'), true))
		if (isset($trace[2]) && is_a($trace[2]['class'], 'Controller', true))
		{
			if (method_exists($this, $name))
			{
				return call_user_func_array(array($this, $name), $args);
			}
			if (preg_match('/^canAccess(.+)$/', $name, $matches))
			{
				return true;
			}
			return null;
		}
		throw new \Exception("The method $class::$name does not exist");
	}
	
	protected static function getInstanceOf($name)
	{
		//$name = Samara_GetFullClassName($name);
		if (isset(Controller::$all_instances[$name]))
		{
			return Controller::$all_instances[$name];
		}
		return (Controller::$all_instances[$name] = new $name());
	}
	
	public static function __callStatic($name, $args)
	{
		$called_class = get_called_class();
		$instance = ($called_class == /*Samara_GetClassName('Controller')*/'Controller' ? Controller::GetInstance() : Controller::getInstanceOf($called_class));
		$exists = method_exists($instance, $name);
		$class = get_class($instance);
		
		//$trace = debug_backtrace();
		$internal = false;
		/*if (isset($trace[1]) && is_a($trace[1]['class'], 'Controller'))
		{
			$internal = true;
		}*/
			
		if ($exists && ($internal || $name[0] >= 'A' && $name[0] <= 'Z'))
		{
			return call_user_func_array(array($instance, $name), $args);
		}
		if ($exists)
		{
			throw new \Exception("The method $class::$name is not public");
		}
		//return $called_class;
		throw new \Exception("The method $class::$name does not exist");
	}
	
	protected function HasMethod($name)
	{
		return method_exists($this, $name);
	}
	
	protected function GetControllerList()
	{
		$files = array_merge(glob(SAMARA_ROOT.$this->GetControllerDir().'/*Controller.sphp'), glob(SAMARA_ROOT.'extensions/*/controllers/*Controller.sphp'));
		$classes = array('Controller');
		foreach ($files as $file)
		{
			$class = basename($file, '.sphp');
			$classes[] = $class;
			Samara_Include($class, substr(dirname($file), strlen(SAMARA_ROOT)));
		}
		return $classes;
	}
	
	protected function GetLink($name, $action = null, $params = null)
	{
		return new Link($name, $this->ControllerName(), $action, $params);
	}
	
	public static function ControllerName()
	{
		//return get_class();//($this);
		//return var_export($this, TRUE);//get_class($this);//
		//return strtolower(preg_replace('/^(.*)Controller$/', '$1', Samara_GetClassName(get_called_class())));
		return strtolower(preg_replace('/^(.*)Controller$/', '$1', get_called_class()));
	}
	
	protected function GetComponents()
	{
		$components = '';
		foreach ($this->GetControllerList() as $controller)
		{
			$c = Controller::getInstanceOf($controller);// new $controller();
			$components .= $c->components();
		}
		return $components;
	}
	
	protected function components()
	{
		return '';
	}
	
	protected function GetControllerDir()
	{
		return 'inc/controllers';
	}
	
	protected static function GetInstance()
	{
		return Controller::$current_instance ?: (Controller::$current_instance = Controller::getInstanceOf('Controller'));
	}
	
	protected function Render()
	{
		$params = $this->params = $this->getParams();
		$controller = $this->GetControllerName();
		//$class = Samara_GetFullClassName($controller.'Controller');
		$class = $controller.'Controller';
		//echo $controller;
		if ($controller && Samara_ClassExists($class, 'inc/controllers'))
		{
			Samara_Include($class, 'inc/controllers');
			//$class = Samara_GetFullClassName($class);
			//$class = $class;
			Controller::$current_instance = Controller::getInstanceOf($class);
			Controller::$current_instance->params = $params;
		}
		echo Controller::GetInstance()->CreatePage();
	}
	
	public function CreatePage()
	{
		$page = $this->GetPageName();
		$canAccess = "canAccess$page";
		if ($this->$canAccess())
		{
			$method = "render$page";
			$xml = $this->$method();
			if ($xml)
			{
				return Theme::Process($xml);
			}
		}
		//var_export($this); die($canAccess);
		return Theme::Process(Theme::Get404View());
	}
	
	public function renderIndex()
	{
		return Theme::getView();
	}
	
	public function renderAbout()
	{
		Samara_Include('ArticleController', 'inc/controllers');
		return ArticleController::redirect('show', array(1));
	}
	
	protected function GetControllerName()
	{
		return $this->Param('controller');
	}
	
	protected function GetPageName()
	{
		return $this->GetAction();
	}
	
	protected function GetAction()
	{
		return $this->Param('action') ?: 'Index';
	}
	
	protected function Param($name)
	{
		if (is_numeric($name))
		{
			return isset($this->params['params'][$name]) ? $this->params['params'][$name] : null;
		}
		return isset($this->params[$name]) ? $this->params[$name] : null;
	}
	
	protected function ParamExists($name)
	{
		if (is_numeric($name))
		{
			return isset($this->params['params'][$name]);
		}
		return isset($this->params[$name]);
	}
	
	protected function getParams()
	{
		$request = preg_split('/[\/|\?]/', trim($_SERVER['REQUEST_URI'], '/'));
		$params = array('controller' => array_shift($request), 'action' => array_shift($request));
		$params['params'] = array();
		if (!Samara_ClassExists(Samara_ToCamelCase($params['controller']).'Controller', 'inc/controllers'))
		{
			$params['params'][] = $params['action'];
			$params['action'] = $params['controller'];
			$params['controller'] = '';
		}
		foreach ($request as $param)
		{
			$p = explode('=', $param);
			if (count($p) > 1)
			{
				$params[$p[0]] = $p[1];
			}
			else
			{
				$params['params'][] = $param;
			}
		}
		$params = array_merge($params, $_GET, $_POST);
		return $params;
	}

	protected function fullRedirect($action = NULL, $params = NULL)
	{
		header('Location: '.$this->createURL($action, $params));
	}
	
	protected static function redirect($action = NULL, $params = NULL)
	{
		$class = get_called_class();
		$instance = Controller::$current_instance = Controller::getInstanceOf($class);
		if ($class != get_class(Controller::GetInstance()))
		{
			return $instance->redirect($action, $params);
		}
			
		$params['action'] = $action;
		$params['controller'] = $instance->GetControllerName();
		$instance->params = $params;
		
		$render = 'render'.$instance->GetPageName();
		return $instance->$render();
	}
	
	protected function createURL($action, $params)
	{
		$class = get_class($this);
		$controller = $class::ControllerName();
		return '/'.($controller ? $controller.'/' : '').($action ? $action.'/' : '').($params ? implode('/', $params) : '');
	}
	
	protected function errorXML($text)
	{
		return '<page title="Error"><text type="paragraph">'.$text.'</text></page>';
	}
	
	protected function createPageXml($name, $contents)
	{
		return '<page title="'.$name.'" controller="'.Controller::GetControllerName().'" action="'.Controller::GetAction().'">'.$contents.'</page>';
	}
	
}

Samara_Include('Theme', 'inc');
Samara_Include('Link', 'inc');

